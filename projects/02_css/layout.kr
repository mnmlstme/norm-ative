---
title: CSS Layout
platform: web-standard
---

# CSS Layout

Layout is the process of determining where to position each piece of content in 2-dimensional space.
You may be familiar with this concept from desktop publishing tools such as Adobe InDesign, or its predecessor Pagemaker.
Or even from the pre-digital printing practice utilizing columns of text, called galleys, which are then cut to length and pasted up on a grid along with photos and illustrations.

CSS layout borrows from this long history of page layout in graphic design. 
However, layouts for the web need to be more flexible than those for physical media.
In a typical desktop publishing process, the designer has the content available, and also knows
the size of the pages that are being printed.
If one of these changes, the designer will go through the layouts and update so that the content fits on the pages.

When designing layouts for the web, however, the designer often doesn't have the content, because it hasn't been generated yet.
The output medium is also variable, as the resulting layout will be viewed on many different devices, at different sizes and resolutions. 
Users may also have configured their devices to their own preferences, such as font size or scale factor.

If web pages were rendered at a fixed size like pages of a physical book, they could still be legible, but much more difficult to consume.
This is the situation we encounter when documents are preformatted as PDF.
The pages of a PDF file are usually intended for printing on one of the standard paper sizes.
It can be previewed on a screen, and if that screen is large enough and has adequate resolution, this
screen view may be an acceptable reading experience.
But view that same file on a mobile phone, tablet, or even most laptop computers, and users will have to
zoom out to see the entire page, and zoom in to make the text legible.
When zoomed in, they will have to scroll or drag the page up/down and left/right to access all of the content.
This is not an acceptable reading experience. 
And if the content is something that the user needs to interact with, it quickly becomes unworkable.

Since pre-formatted pages are unacceptable, web layout must be deferred until both the full content, 
and the target screen characteristics are known.
This means the actual formatting has to take place in the browser.
It also means that any layout instructions we give to the browser cannot be overly specific.
In essence, CSS layout is about providing constraints, hints, and strategies, which the browser
then applies as needed to present the content on each specific device configuration.

There is a very general strategy, built into every browser, which is applied when no CSS layout has been given.
It starts by assuming that the content has been properly marked up in HTML.
The markup is used to divide the content into `block` elements and `inline` elements.
Block elements are larger pieces of content like paragraphs, headings, figures, tables, and lists.
Inline elements are shorter strings of characters such as links, quotations, emphasized phrases, and (strangely) images.
Block elements may contain inline elements, other block elements, or both.
Inline elements may only contain other inline elements.

Once the content is divided into block and inline elements, the layout strategy proceeds as follows:

* Block elements are stacked vertically. Each block element extends the full width of the page or enclosing block element.
* Inline elements flow in a horizontal line, and may wrap to multiple lines if they exceed the width of the enclosing block element.



---

## Controlling the size of blocks

```html
<p class="boxed-text">
  Paragraphs are by default full width.
</p>
<p class="narrow-box boxed-text">
  This box is narrow.
</p>
<p class="narrow-box boxed-text">
  If we add more content to a narrow box, that content 
  will wrap to as many lines as it needs, making the box taller.
</p>
<p class="narrow-box two-line-box boxed-text">
  If we constrain the height of the box, the content
  will overflow.
</p>
```

Let's draw make the box around our blocks visible.
We can define the class `boxed-text` to do that:

```css
.boxed-text {
  border: 1px solid lightCoral;
}
```

Our box extends to the full width of the page, because that is the default layout for 
block elements.
To change the width of the box, we can use the `width` property:

```css
.narrow-box {
  width: 15em;
}
```

We can also control the height of the box, using the `height` property:

```css
.two-line-box {
  height: 2.5em;
}
```


---
## Intrinsic Sizing

```html
<p class="boxed-text narrow-box">
  Too little text.
</p>
<p class="boxed-text hug-box">
  This box hugs content.
</p>
<p class="boxed-text squeeze-box">
  This box is as narrow as it can be.
</p>
<p class="boxed-text min-box">
  This box is not too narrow because it has a minimum width.
</p>
<p class="boxed-text min-box">
  This box has a minimum width, but if there are
  <em class="non-breaking">phrases that cannot be broken</em>, 
  CSS will make room for them.
</p>
```

In the previous section, we looked at the box model, and how setting the `width` on a box forces the text within the box to wrap.
But there are also times when we want the box to _hug_ the contents.


```css
.hug-box {
  width: max-content;
}

.squeeze-box {
  width: min-content;
}
```

```css
.min-box {
  min-width: 8em;
  width: min-content;
}

.non-breaking {
  white-space: nowrap;
}
```

---

## Margins and Padding

```html
<section class="boxed-section">
  <h1 class="boxed-text"><em>Metamorphosis</em> by Franz Kafka</h1>

  <p class="boxed-text with-margins">
    One morning, when Gregor Samsa woke from troubled dreams, 
    he found himself transformed in his bed into a horrible vermin. 
    He lay on his armour-like back, and if he lifted his head a little 
    he could see his brown belly, slightly domed and divided by arches 
    into stiff sections. The bedding was hardly able to cover it and 
    seemed ready to slide off any moment. His many legs, pitifully thin compared with the size of the rest of him, waved about helplessly as he looked. 
  </p>
  <p class="boxed-text with-padding">
    “What’s happened to me?” he thought. It wasn’t a dream. His room, a proper human room although a little too small, lay peacefully between its four familiar walls. A collection of textile samples lay spread out on the table—Samsa was a travelling salesman—and above it there hung a picture that he had recently cut out of an illustrated magazine and housed in a nice, gilded frame. It showed a lady fitted out with a fur hat and fur boa who sat upright, raising a heavy fur muff that covered the whole of her lower arm towards the viewer. 
  </p>
</section>
```

```css
.boxed-section {
  width: 25em;
  border: 1px solid plum;
}

.with-margins {
  margin: 2em;
}

.with-padding {
  padding: 2em;
}
```




---

## Box Model

```html
```

In the previous section, we saw that padding adds space inside was inserted inside 

The `content-box` and `border-box` classes use the properties `height`, `width`, `padding`, and `border`, to describe the layout of these boxes.
The difference between the two boxes is the `box-sizing` properties,
which determines how the overall dimensions of the box are computed from the other properties.

### The `width` property

Every box in CSS has a width.
Often there is no need to set the width since the browser will automatically determine a width based on the box's content and other properties.

But we can also control the width by setting the `width` property directly.
We can either specify a length, a percentage, or one of several keywords, including the default, `auto`.
Here we specify a length in pixels.

This is called an _extrinsic_ width, because it has nothing to do with the contents of the element.
We will see soon how to set an _intrinsic_ width, which accounts for the box's contents.

### The `height` property

Analogous to `width`, the `height` property determines how tall the box is.

Setting `height` to a fixed value, instead of the default `auto`, leads to the potential of content overflowing the box, and the need to handle scrolling, or truncated content. So it tends to be less common to set the `height` than the `width`.

### The `border` property

We've seen the `border` property before, when we discussed colors. The `border` property is actually a shorthand for the properties `border-color`, `border-style`, and `border-width`.
In this discussion we'll be concerned with the `border-width`, which sets the width, or _thickness_, of the border. Here we've specified that the border be 4 pixels thick.

### The `padding` property

Because we often want some whitespace between a box's border and its content,
the box model allows us to set the dimensions of the `padding`. Here we've specified the same padding,
20 pixels, in all directions.
It is also possible to use the `padding` property to set different dimensions for horizontal and vertical padding, or even to specify a different amount of padding in each direction.



---

## The `box-sizing` property


<p class="content-box">
  This is a paragraph of content. We've put a box with a border around it.
</p>

<p class="border-box">
  Here is a box with a border around it. We've put this content inside.
</p>
```

Every web page is laid out by putting content into boxes, and positioning
those boxes relative to each other. So the basic model for layout is
the box model.

```css
.content-box {
  width: 200px;
  height: auto; /* default */
  border: 4px solid #cec;
  padding: 20px;
  /* this was the default, prior to reset: */
  box-sizing: content-box;
}

.border-box {
  width: 200px;
  height: auto; /* default */
  border: 4px solid #cce;
  padding: 20px;
}

```

By default, the `width` property refers to the width of the box's _content_, exclusive of the padding and border.
Sometimes this is what you want, but at other times, we want to make this box fit into a larger layout,
and it would be easier for us to specify the overall width of the box, including padding and borders.
In fact, before CSS was standardized, that is exactly how some browsers (notably Internet Explorer) interpreted `width`. This was called _Quirks mode_.

When CSS standardized the definition of the `width` property, it would've been very difficult to
convert the large amounts of CSS that were written assuming _Quirks mode_'s box model.
So another property, `box-sizing` was added to provide support for three box models: `content-box` (the default), `border-box` (the Quirks mode one), and `padding-box` (which considers everything inside the border part of the width).

Even though the default is `content-box`, many developers still prefer `border-box`, and end up
"resetting" the default `box-sizing` to `border-box`. In the following discussion, we will assume this reset has been applied to the CSS.

```css
* {
  /* reset the box model to use border-box */
  box-sizing: border-box;
}
```

## Dealing with Overflow


When designing layouts, we should always consider the content that is being presented.
In some cases, the content is static. 
We know what it contains and it will never change.
But often the same layout is used to contain different content at different times.
For example, the same layout may be used to present all the articles on a news site.

Designers often work with placeholder text when working with content that is unknown or subject to change. 
But we also need to anticipate what will happen when some unusual text occurs.