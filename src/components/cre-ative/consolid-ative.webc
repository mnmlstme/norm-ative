<!-- <template> for consolid-ative -->

<main class="layout">
  <slot></slot>
</main>

<style webc:scoped>
  :host {
    --heightViewer: calc(100vh - var(--heightFooter));
    height: var(--heightViewer);
    overflow: hidden;
    position: relative;
  }

  .layout {
    --render-grid-column: 1;
    --code-grid-column: 1;
    --prose-grid-column: 2;

    display: grid;
    position: relative;
    top: calc(var(--heightViewer) * (1 - var(--current-scene, 1)));
    grid-template-columns: 60vw 40vw;
    grid-auto-rows: calc(0.6 * var(--heightViewer))
      calc(0.4 * var(--heightViewer));
    grid-auto-flow: column;
    justify-items: start;
    transition: top 0.5s ease-in-out;
    pointer-events: none;
  }

  .layout > * {
    pointer-events: all;
  }

  @media print {
    .layout {
      --prose-grid-row: unset;
      --render-grid-row: unset;
      --code-grid-row: unset;

      position: relative;
      top: auto;
      left: auto;
      height: auto;
      grid-template-columns: initial;
      grid-template-rows: initial;
      grid-auto-columns: initial;
    }

    .layout .render {
      break-before: page;
      break-inside: avoid;
      border: 1px dotted black;
    }

    .layout .code {
      overflow: visible;
    }
  }
</style>

<script>
  customElements.define(
    "consolid-ative",
    class extends HTMLElement {
      connectedCallback() {
        let provider = this.closest("[data-provider]");

        if (provider) {
          const { value: currentScene } = provider.observe(
            "current-scene",
            (newValue) => {
              console.log("Setting layout to scene", newValue);
              this.style = `--current-scene: ${newValue}`;
            }
          );

          console.log("Consolid-ative (webc)");
        }
      }
    }
  );
</script>
