<!-- <template> for consolid-ative -->

<main class="layout">
	<slot></slot>
</main>

<style>
  * {
    box-sizing: border-box;  
  }
  
  .layout {
    --prose-grid-row: 1 / span 2;
    --render-grid-row: 1;
    --code-grid-row: 2;
    
    display: grid;
    position: absolute;
    top: 0;
    left: calc(100vw * (1 - var(--current-scene, 1)));
    height: 100vh;
    grid-template-columns: 60vw 40vw;
    grid-template-rows: 1fr 1fr var(--heightFooter);
    grid-auto-columns: 60vw 40vw;
    grid-auto-flow: row;
    justify-items: start;
    transition: left 0.5s ease-in-out;
    pointer-events: none;
  }
  
  .layout > * {
    pointer-events: all;
  }
  
  
  .layout .render {
    grid-row: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    overflow: auto;
    position: relative;
    padding: var(--sizeRenderPadding);
    max-width: 100%;
    max-height: 100%;
    overflow: auto;
  }

  .layout .code {
    grid-row: 2;
    max-width: 100%;
    max-height: 100%;
    overflow: auto;
  }

</style>

<script>
customElements.define("consolid-ative", class extends HTMLElement {
  connectedCallback() {
    let provider = this.closest("[data-provider]");
    
    const {value: currentScene} = provider.observe('current-scene',
       (newValue) => {
         console.log("Setting layout to scene", newValue)
         this.style = `--current-scene: ${newValue}`
       }
    );
    
    console.log("Consolid-ative (webc)");
  }
});
</script>

